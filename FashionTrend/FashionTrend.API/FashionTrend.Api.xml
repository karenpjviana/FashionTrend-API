<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FashionTrend.API</name>
    </assembly>
    <members>
        <member name="M:DraftContract.Create(CreateDraftContractRequest)">
            <summary>
            Cria um novo Contrato com base nos dados fornecidos.
            </summary>
            <param name="request">Dados da Ordem de Serviço a ser criada.</param>
            <response code="201">Ordem de Serviço criada com sucesso.</response>
            <response code="400">Requisição inválida ou erro ao criar a Ordem de Serviço.</response>
        </member>
        <member name="M:DraftContract.Update(System.Guid,AcceptedDraftContractRequest,System.Threading.CancellationToken)">
            <summary>
            Altera o Contrato cadastrado pelo Id.
            </summary>
            <param name="id">Id do Contrato</param>
            <param name="request">Dados da Contrato a ser alterada.</param>
            <param name="cancellationToken"></param>
            <response code="404">Contrato não encontrada.</response>
            <response code="200">Retorna que um Contrato foi alterada.</response>
        </member>
        <member name="M:Message.Create(CreateMessageRequest)">
            <summary>
            Cria uma nova mensagem.
            </summary>
            <param name="request">Dados da mensagem a ser criada.</param>
            <response code="201">Mensagem criada com sucesso.</response>
            <response code="400">Requisição inválida ou erro ao criar a Mensagem.</response>
        </member>
        <member name="M:Service.GetAll(System.Threading.CancellationToken)">
            <summary>
            Retorna todos os Services(Serviços) cadastrados.
            </summary>
            <param name="cancellationToken"></param>
            <response code="200">Coleção de Service(Serviço). Pode ser uma coleção vazia se não houver Services cadastrados.</response>
        </member>
        <member name="M:Service.Get(System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Retorna o Serviço cadastrado por ID.
            </summary>
            <param name="id">ID do Serviço</param>
            <param name="cancellationToken"></param>
            <response code="200">Retorna os dados do Serviço quando encontrado.</response>
            <response code="404">Serviço não encontrado.</response>
        </member>
        <member name="M:Service.GetByDescription(System.String,System.Threading.CancellationToken)">
            <summary>
            Retorna o Serviço cadastrado por descrição.
            </summary>
            <param name="description">Descrição do Serviço</param>
            <param name="cancellationToken"></param>
            <response code="200">Retorna os dados do Serviço quando encontrado.</response>
            <response code="404">Serviço não encontrado.</response>
        </member>
        <member name="M:Service.GetByType(ERequestType,System.Threading.CancellationToken)">
            <summary>
            Retorna o Serviço cadastrado por tipo.
            </summary>
            <param name="type">Tipo de Serviço</param>
            <param name="cancellationToken"></param>
            <response code="200">Retorna os dados do Serviço quando encontrado.</response>
            <response code="404">Serviço não encontrado.</response>
        </member>
        <member name="M:Service.Create(CreateServiceRequest)">
            <summary>
            Cria um novo Serviço com base nos dados fornecidos.
            </summary>
            <param name="request">Dados do Serviço a ser criado.</param>
            <response code="201">Serviço criado com sucesso.</response>
            <response code="400">Requisição inválida ou erro ao criar o Serviço.</response>
        </member>
        <member name="M:Service.Update(System.Nullable{System.Guid},UpdateServiceRequest,System.Threading.CancellationToken)">
            <summary>
            Altera o Serviço cadastrado pelo Id.
            </summary>
            <param name="id">Id do Serviço</param>
            <param name="request">Dados do Serviço a ser alterado.</param>
            <param name="cancellationToken"></param>
            <response code="404">Serviço não encontrado.</response>
            <response code="200">Retorna que um Serviço foi alterado.</response>
        </member>
        <member name="M:Service.Delete(System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Deleta o Serviço cadastrado pelo Id.
            </summary>
            <param name="id">Id do Serviço</param>
            <param name="cancellationToken"></param>
            <response code="200">Retorna que um Serviço foi deletado.</response>
        </member>
        <member name="M:ServiceOrder.GetAll(System.Threading.CancellationToken)">
            <summary>
            Retorna todos as ServiceOrders(Ordens de Serviço) cadastradas.
            </summary>
            <param name="cancellationToken"></param>
            <response code="200">Coleção de ServiceOrder(Ordem de Serviço). Pode ser uma coleção vazia se não houver ServiceOrders cadastrados.</response>
        </member>
        <member name="M:ServiceOrder.Get(System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Retorna a Ordem de Serviço cadastrada por ID.
            </summary>
            <param name="id">ID da Ordem de Serviço</param>
            <param name="cancellationToken"></param>
            <response code="200">Retorna os dados da Ordem de Serviço quando encontrada.</response>
            <response code="404">Ordem de Serviço não encontrada.</response>
        </member>
        <member name="M:ServiceOrder.GetByServiceId(System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Retorna a Ordem de Serviço cadastrada por ServiceId.
            </summary>
            <param name="id">ID da Ordem de Serviço</param>
            <param name="cancellationToken"></param>
            <response code="200">Retorna os dados da Ordem de Serviço quando encontrada.</response>
            <response code="404">Ordem de Serviço não encontrada.</response>
        </member>
        <member name="M:ServiceOrder.GetBySupplierId(System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Retorna a Ordem de Serviço cadastrada por SupplierId.
            </summary>
            <param name="id">ID do Supplier(Fornecedor)</param>
            <param name="cancellationToken"></param>
            <response code="200">Retorna os dados da Ordem de Serviço quando encontrada.</response>
            <response code="404">Ordem de Serviço não encontrada.</response>
        </member>
        <member name="M:ServiceOrder.Create(CreateServiceOrderRequest)">
            <summary>
            Cria uma nova Ordem de Serviço com base nos dados fornecidos.
            </summary>
            <param name="request">Dados da Ordem de Serviço a ser criada.</param>
            <response code="201">Ordem de Serviço criada com sucesso.</response>
            <response code="400">Requisição inválida ou erro ao criar a Ordem de Serviço.</response>
        </member>
        <member name="M:ServiceOrder.Update(System.Nullable{System.Guid},UpdateServiceOrderRequest,System.Threading.CancellationToken)">
            <summary>
            Altera a Ordem de Serviço cadastrado pelo Id.
            </summary>
            <param name="id">Id da Ordem de Serviço</param>
            <param name="request">Dados da Ordem de Serviço a ser alterada.</param>
            <param name="cancellationToken"></param>
            <response code="404">Ordem de Serviço não encontrada.</response>
            <response code="200">Retorna que uma Ordem de Serviço foi alterada.</response>
        </member>
        <member name="M:ServiceOrder.Delete(System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Deleta a Ordem de Serviço cadastrada pelo Id.
            </summary>
            <param name="id">Id da Ordem de Serviço</param>
            <param name="cancellationToken"></param>
            <response code="200">Retorna que uma Ordem de Serviço foi deletada.</response>
        </member>
        <member name="M:Supplier.GetAll(System.Threading.CancellationToken)">
            <summary>
            Retorna todos os Suppliers(Fornecedores) cadastrados.
            </summary>
            <param name="cancellationToken"></param>
            <response code="200">Coleção de Supplier(Fornecedor). Pode ser uma coleção vazia se não houver suppliers cadastrados.</response>
        </member>
        <member name="M:Supplier.Get(System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Retorna o fornecedor cadastrado por ID.
            </summary>
            <param name="id">ID do fornecedor</param>
            <param name="cancellationToken"></param>
            <response code="200">Retorna os dados do fornecedor quando encontrado.</response>
            <response code="404">Fornecedor não encontrado.</response>
        </member>
        <member name="M:Supplier.GetByEmail(System.String,System.Threading.CancellationToken)">
            <summary>
            Retorna o fornecedor cadastrado por Email.
            </summary>
            <param name="email">Email do fornecedor</param>
            <param name="cancellationToken"></param>
            <response code="200">Retorna os dados do fornecedor quando encontrado.</response>
            <response code="404">Fornecedor não encontrado.</response>
        </member>
        <member name="M:Supplier.GetByMachine(ESewingMachine,System.Threading.CancellationToken)">
            <summary>
            Retorna o fornecedor cadastrado por maquina.
            </summary>
            <param name="machine">Maquina do fornecedor</param>
            <param name="cancellationToken"></param>
            <response code="200">Retorna os dados do fornecedor quando encontrado.</response>
            <response code="404">Fornecedor não encontrado.</response>
        </member>
        <member name="M:Supplier.GetByMaterial(System.String,System.Threading.CancellationToken)">
            <summary>
            Retorna o fornecedor cadastrado por material.
            </summary>
            <param name="material">Material do fornecedor</param>
            <param name="cancellationToken"></param>
            <response code="200">Retorna os dados do fornecedor quando encontrado.</response>
            <response code="404">Fornecedor não encontrado.</response>
        </member>
        <member name="M:Supplier.Create(CreateSupplierRequest)">
            <summary>
            Cria um novo fornecedor com base nos dados fornecidos.
            </summary>
            <param name="request">Dados do fornecedor a serem criados.</param>
            <response code="201">Fornecedor criado com sucesso.</response>
            <response code="400">Requisição inválida ou erro ao criar o fornecedor.</response>
        </member>
        <member name="M:Supplier.Update(System.Nullable{System.Guid},UpdateSupplierRequest,System.Threading.CancellationToken)">
            <summary>
            Altera o fornecedor cadastrado pelo Id.
            </summary>
            <param name="id">Id do fornecedor</param>
            <param name="request">Dados do fornecedor a serem alterados.</param>
            <param name="cancellationToken"></param>
            <response code="404">Fornecedor não encontrado.</response>
            <response code="200">Retorna que um fornecedor foi alterado.</response>
        </member>
        <member name="M:Supplier.Delete(System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Deleta o fornecedor cadastrado pelo Id.
            </summary>
            <param name="id">Id do fornecedor</param>
            <param name="cancellationToken"></param>
            <response code="200">Retorna que um fornecedor foi deletado.</response>
        </member>
    </members>
</doc>
